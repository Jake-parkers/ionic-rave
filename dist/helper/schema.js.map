{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../src/helper/schema.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,IAAM,MAAM,GAAG;IAClB,SAAS,EAAE;QACT,QAAQ,EAAE,MAAM;QAChB,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,UAAC,IAAI;YACZ,MAAM,CAAC,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,SAAS,CAAA;SACxD;KACF;IACD,KAAK,EAAE;QACL,QAAQ,EAAE,MAAM;QAChB,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,UAAC,IAAI;YACZ,MAAM,CAAC,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,SAAS,CAAA;SACxD;KACF;IACD,cAAc,EAAE;QACd,QAAQ,EAAE,MAAM;QAChB,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,UAAC,IAAI;YACZ,MAAM,CAAC,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,SAAS,CAAA;SACxD;KACF;IACD,cAAc,EAAE;QACd,QAAQ,EAAE,MAAM;QAChB,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,UAAC,IAAI;YACZ,MAAM,CAAC,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,SAAS,CAAA;SACxD;QACD,YAAY,EAAE,UAAC,KAAK;YAClB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,4DAA4D,CAAC,CAAA;SACjF;KACF;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,MAAM;QAChB,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,UAAC,IAAI;YACZ,MAAM,CAAC,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,SAAS,CAAA;SACxD;KACF;IACD,cAAc,EAAE;QACd,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,QAAQ;KACf;IACD,eAAe,EAAE;QACf,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,QAAQ;KACf;IACD,YAAY,EAAE;QACZ,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,QAAQ;KACf;IACD,WAAW,EAAE;QACX,QAAQ,EAAE,KAAK;QACf,YAAY,EAAE,UAAC,KAAK;YAClB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;SAC5B;KACF;IACD,QAAQ,EAAE;QACR,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,QAAQ;KACf;IACD,OAAO,EAAE;QACP,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,QAAQ;KACf;IACD,kBAAkB,EAAE;QAClB,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,QAAQ;KACf;IACD,iBAAiB,EAAE;QACjB,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,QAAQ;KACf;IACD,YAAY,EAAE;QACZ,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,QAAQ;KACf;IACD,kBAAkB,EAAE;QAClB,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,QAAQ;KACf;IACD,YAAY,EAAE;QACZ,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,QAAQ;QACd,UAAU,EAAE,UAAC,KAAK;YAChB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAA;SAC1C;KACF;CACF,CAAA","sourcesContent":["export const schema = {\r\n    PBFPubKey: {\r\n      required: \"true\",\r\n      type: \"string\",\r\n      isEmpty: (data) => {\r\n        return data === \"\" || data == null || data == undefined\r\n      }\r\n    },\r\n    txref: {\r\n      required: \"true\",\r\n      type: \"string\",\r\n      isEmpty: (data) => {\r\n        return data === \"\" || data == null || data == undefined\r\n      }\r\n    },\r\n    customer_phone: {\r\n      required: \"true\",\r\n      type: \"string\",\r\n      isEmpty: (data) => {\r\n        return data === \"\" || data == null || data == undefined\r\n      }\r\n    },\r\n    customer_email: {\r\n      required: \"true\",\r\n      type: \"string\",\r\n      isEmpty: (data) => {\r\n        return data === \"\" || data == null || data == undefined\r\n      },\r\n      isValidEmail: (email) => {\r\n        return email.match(/^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/)\r\n      }\r\n    },\r\n    amount: {\r\n      required: \"true\",\r\n      type: \"number\",\r\n      isEmpty: (data) => {\r\n        return data === \"\" || data == null || data == undefined\r\n      }\r\n    },\r\n    integrity_hash: {\r\n      required: false,\r\n      type: \"string\",\r\n    },\r\n    payment_options: {\r\n      required: false,\r\n      type: \"string\",\r\n    },\r\n    payment_plan: {\r\n      required: false,\r\n      type: \"number\",\r\n    },\r\n    subaccounts: {\r\n      required: false,\r\n      isValidArray: (array) => {\r\n        return Array.isArray(array)\r\n      }\r\n    },\r\n    currency: {\r\n      required: false,\r\n      type: \"string\"\r\n    },\r\n    country: {\r\n      required: false,\r\n      type: \"string\",\r\n    },\r\n    customer_firstname: {\r\n      required: false,\r\n      type: \"string\",\r\n    },\r\n    customer_lastname: {\r\n      required: false,\r\n      type: \"string\",\r\n    },\r\n    custom_title: {\r\n      required: false,\r\n      type: \"string\",\r\n    },\r\n    custom_description: {\r\n      required: false,\r\n      type: \"string\",\r\n    },\r\n    redirect_url: {\r\n      required: false,\r\n      type: \"string\",\r\n      isValidUri: (email) => {\r\n        return email.match(/\\w+:(\\/?\\/?)[^\\s]+/g)\r\n      }\r\n    },\r\n  }\r\n"]}